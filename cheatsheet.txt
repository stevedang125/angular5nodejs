# errors and fixed:
    Error:
        bodyparser errors? 
    Solution:
        makesure app.use(bodyparser.json()) goes be4 any api, routes

    Error:#3
        options.jwtFromRequest = ExtractJwt.fromAuthHeader();?
        fromAuthHeader() is not a function.
    Solution:
        options.jwtFromRequest = ExtractJwt.fromAuthHeaderWithScheme("jwt");
        because jwt has a newer version now.

    Error:#3
        const token = jwt.sign(user, config.secret);
        Expected "payload" to be a plain object.
    Solution:https:
        Your user object is initialized here:
        User.getUserByUsername(username, (err, user)
        A mongoosejs object, which contains many methods and is not "serializable".
        Passing a plain object, by either using .lean() from mongoose or 
        plain toJSON method:
        
        const token = jwt.sign(user.toJSON(), config.secret);

# 1.Create server, connect to database, create api and routes: (set up the server, routes)
    create server.js
    npm init
    add all the dependencies:
        "dependencies": {
            "express": "*",
            "body-parser": "*",
            "cors": "*",
            "bcryptjs": "*",
            "mongoose": "*",
            "jsonwebtoken": "*",
            "passport": "*",
            "passport-jwt": "*"
        },
    npm install
    bring in server.js:
        express, path, bodyparser, cors, passport, mongoose
        set up the localhost listener
        get the path for:
            routes: app.use('/users', users)
                    bring in express, express.Router();
                    set up the routes, exports the routers;
            database: module.exports = { db: '', secret: ''}
    create folders:
        config/database.js
        routes/users.js

# 2.Add user register, salt+hash the user.password, added userSchema:(add register)
    create models/user.js
    bring in: mongoose, bcryptjs, config/db for mongoose, jwt.
    use mongoose.Schema to create an Object for new users.
    exports the user schema with the name of the model, schema (User, userSchema)
    exports a getUserById function (id, callback), User.findById(id, callback); // deletion
    exports a getUserByUsername function(username, callback), query = {username: username},
                                                     User.findOne(query, callback) // search
    exports an addUser function(newUser, (callback) =>{
        bcryptjs:
            genSalt the password
            hash    the password
        newUser.save(callback);
    });

    routes: register
            create a new object to hold the new user.
            call User.addUser(newUser, (err, user)=>{
                if(err){
                    res.json({success: false, msg: 'Error! Failed to register user.'});
                }else{
                    res.json({success: true, msg: 'User registered!'});
                }
            });
            
    User postman to test. header(content-type, application/json)

# 3. API Authentication, Token:(protect specific routes)
    server.js:
        bring in:   app.use(passport.initialize());
                    app.use(passport.session());
                    require('./config/passport')(passport);
    
    create config/passport.js
        bring in: 
            const JwtStrategy = require('passport-jwt').Strategy;
            const ExtractJwt = require('passport-jwt').ExtractJwt;

            const User = require('../models/user');
            const config = require('../config/database');

            module.exports = function(passport){
                let options = {};
                options.jwtFromRequest = ExtractJwt.fromAuthHeaderWithScheme("jwt");
                options.secretOrKey = config.secret;
                passport.use(new JwtStrategy(options, (jwt_payload, done)=>{
                    console.log(jwt_payload._id);
                    User.getUserById(jwt_payload._id, (err, user)=>{
                        if(err){
                            return done(err, false);
                        }
                        if(user){
                            return done(null, user);
                        }else{
                            return done(null, false);
                        }
                    });
                }));
            }

    routes/users.js, /authentication:
        1st thing: get user.username and user.password
        then:
        User.getUserByUsername(username, (err, user) => {
        
        Check for errors:
            if(err){throw err;}

        Check for existing user:
            if(!user){
                return res.json({ success:false, msg:'User not found!' });
            }
        
        If there is a match for user, then compare the password
        User.comparePassword(password, user.password, (err, isMatch) => {
            if(err){
                throw err;
            }
        
        Also, add the token to the user:
            if(isMatch){
                const token = jwt.sign(user.toJSON(), config.secret,{expiresIn:604800});
                res.json({
                    success: true,
                    token: 'JWT '+token,
                    user: {
                        id: user._id,
                        name: user.name,
                        username: user.username,
                        email: user.email
                    }
            });
              
            } else{
                return res.json({success:false, msg:'Wrong password!'});
            }
            });
            });
            });

    To protect a route, use passport.authenticate('jwt', {session: false}) as the 2nd param.
        Eg:
        From: router.get('/profile', (req, res, next) =>{}
        To:router.get('/profile', passport.authenticate('jwt', {session: false}), (req, res, next)=>{}
    Use postman to check,
        Get request to users/profile:
        header: Key: Authorization Value: the token

# 4. Front End: (Angular 5 time !!!)
    app.module.ts:
        import the library:
            import { RouterModule, Routes } from '@angular/router';
        set up the routes
            const appRoutes: Routes =[
                { path:'', component: HomeComponent },
                { path: 'login', component: LoginComponent },
                { path: 'register', component: RegisterComponent },
                { path:'dashboard', component: DashboardComponent },
                { path: 'profile', component: ProfileComponent },
                { path: 'about', component: AboutComponent },
                { path: '**', redirectTo: '', pathMatch: 'full' }
            ];
        don't forget to add it to the import array:
            RouterModule.forRoot(appRoutes)
    
    index.html:
        add some bootstrap, javascript for it:
            <link rel="stylesheet" href="https://bootswatch.com/4/minty/bootstrap.min.css">
            <link rel="stylesheet" href="https://bootswatch.com/4/minty/bootstrap.css">
            <script src="https://code.jquery.com/jquery-3.2.1.slim.min.js" integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN" crossorigin="anonymous"></script>
            <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js" integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q" crossorigin="anonymous"></script>
            <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js" integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl" crossorigin="anonymous"></script>
    
    app.component.html
        for the nav bar to show up all the time:
            <app-navbar></app-navbar>
            <div class="container">
                <router-outlet></router-outlet>
            </div>

# 5. Validation and Authentication:(Added Register)
    capture the information from the fields user entered
    in the onRegisterSubmit(){
        create a new userObject to hold those information
        validateEmail
        validateRegister
        use auth service to send a request to the server
        then .subcribe to get the data
    }

    bring in server.js:
        var http = require('http');
        http.createServer(app).listen(port, () =>{}

    Create to simple forms for register and login.
    Add links, ngModel, event binding to them.

    Validation: create service folder, then ng g service validation
        Add the service to app.module.ts
        Simple validation for the input fields:
            validateRegister(user){
                if(user.name == undefined || user.email == undefined || user.username == undefined || user.password == undefined){
                    return false;
                }else{
                    return true;
                }
            }

            validateEmail(email){
                const re = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
                return re.test(String(email).toLowerCase());
            }

    Authentication: in service folder, ng g service auth
        Add the service to app.module.ts
            import { HttpClient, HttpHeaders } from '@angular/common/http';
        Call the backend server on register
            authToken: any;

            private baseUri:string="http://localhost:8080";
            private headers = new HttpHeaders().set('Content-Type', 'application/json');

            constructor(private http: HttpClient) { }

            registerUser(user){
                return this.http.post(this.baseUri+'/users/register', user, {headers:this.headers});
            }
    
    Register component:
        Add the service, inject the service to use its functions.
        .subcribe(data => {}, err =>{}) to the http information:

# 6 Log in and Log out:
    Get the data from the user input fields.
    Validation on Log in
    Use authService for authenticateUser, 
        if the user has an account, wrong password or username.
    
    send a request to the back end server to get the data, which
    have the token and the user object.
    save the token and userobject into local storeStorage.

    logout()
        set authToken = null, userObject = null;


    
